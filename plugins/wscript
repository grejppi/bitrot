#!/usr/bin/env python3

top = '..'

import sys

def build(bld):
    def w32_flags(bld, target):
        return ''
        if bld.env.PLATFORM == 'win32':
            return '-Wl,--out-implib,{0}.a'.format(target)
        else:
            return ''

    plugins = ['Reverser', 'Tapestop', 'Crush', 'Repeat']
    formats = [('ladspa', 'bitrot_{0}'), ('vst', 'bitrot_{0}_vst')]
    bundle = 'bitrot.lv2'

    import os.path
    import inspect
    ttlgen = os.path.dirname(os.path.abspath(inspect.stack()[0][1]))
    ttlgen = os.path.join(ttlgen, 'ttlgen.py')

    ttls = []
    tasks = {}

    for plugin_name in plugins:
        source = '{0}/Bitrot{0}.cpp'.format(plugin_name)
        plugin = plugin_name.lower()

        for format, target in formats:
            target = target.format(plugin)

            # bloody windows tho
            w32 = w32_flags(bld, target)

            t = bld.shlib(features     = 'cxx cxxshlib',
                          source       = [source],
                          includes     = ['../DPF/distrho', plugin_name, '../common'],
                          cxxflags     = ['-DDISTRHO_PLUGIN_TARGET_{0}'.format(format.upper())],
                          name         = '{0} ({1})'.format(plugin_name, format.upper()),
                          target       = target,
                          install_path = '${{PREFIX}}/lib/{0}'.format(format))
            tasks[t.name] = t

        target = '{0}/{1}'.format(bundle, plugin)
        w32 = w32_flags(bld, plugin)

        lv2 = bld.shlib(features     = 'cxx cxxshlib',
                        source       = [source],
                        includes     = ['../DPF/distrho', plugin_name, '../common'],
                        cxxflags     = ['-DDISTRHO_PLUGIN_TARGET_LV2'],
                        name         = '{0} (LV2)'.format(plugin_name),
                        target       = target,
                        install_path = '${{PREFIX}}/lib/lv2/{0}'.format(bundle))

        extension = bld.env.cxxshlib_PATTERN
        extension = extension[(extension.rfind('.') + 1):]
        metasrc = bld(features     = 'cxx cxxprogram',
                      source       = [source,
                                      '../common/MetadataGenerator.cpp'],
                      includes     = ['../DPF/distrho', plugin_name, '../common'],
                      cxxflags     = ['-DDISTRHO_PLUGIN_TARGET_LV2',
                                      '-DBITROT_BINARY_NAME="{0}.{1}"'.format(
                                          plugin,
                                          extension,
                                      ),
                                      '-DBITROT_TTL_NAME="{0}.ttl"'.format(
                                          plugin,
                                      ),
                                      '-Dprotected=public'],  # ...pretend you didn't see that
                      ldflags      = [],
                      name         = '{0} (LV2 metadata generator)'.format(plugin),
                      target       = 'metagen/{0}'.format(plugin),
                      install_path = None)

        # Restore the original environment for the metadata generator
        for k in metasrc.env.keys():
            del metasrc.env[k]
        metasrc.env.load('.default_env')

        ttl = bld(features     = 'seq',
                  rule         = '"{0}" "{1}" ${{SRC}}'.format(sys.executable, ttlgen),
                  source       = 'metagen/{0}'.format(metasrc.env.cxxprogram_PATTERN % plugin),
                  target       = ['{0}/{1}.ttl'.format(bundle, plugin),
                                  '{0}/manifest.{1}.ttl'.format(bundle, plugin)],
                  install_path = '${{PREFIX}}/lib/lv2/{0}'.format(bundle),
                  name         = '{0}.ttl'.format(plugin),
                  use          = metasrc.get_name(),
                  cwd          = os.path.join(bld.out_dir, 'plugins', bundle))
        ttls.append(ttl)

        bld.add_manual_dependency(
            bld.path.find_or_declare('{0}/manifest.ttl'.format(bundle)),
            bld.path.find_or_declare('{0}/manifest.{1}.ttl'.format(bundle, plugin)),
        )

        bld.add_manual_dependency(
            bld.path.find_or_declare('{0}/{1}.ttl'.format(bundle, plugin)),
            bld.path.find_or_declare(ttlgen),
        )

    bld.add_manual_dependency(
        bld.path.find_or_declare('{0}/manifest.ttl'.format(bundle, plugin)),
        bld.path.find_or_declare(ttlgen),
    )

    manifest = bld(features     = 'seq',
                   rule         = '"{0}" "{1}"'.format(sys.executable, ttlgen),
                   target       = '{0}/manifest.ttl'.format(bundle),
                   source       = ['{0}/manifest.{1}.ttl'.format(bundle, x.lower()) for x in plugins],
                   install_path = '${{PREFIX}}/lib/lv2/{0}'.format(bundle),
                   name         = 'manifest.ttl',
                   use          = ttl,
                   cwd          = os.path.join(bld.out_dir, 'plugins', bundle))

    if bld.env.PLATFORM == 'darwin':
        for plugin_name in plugins:
            name = '{0} (VST)'.format(plugin_name)
            vst = tasks[name]

            vst_bundle = 'Bitrot {0}.vst'.format(plugin_name)
            vst_bundle = bld.path.get_bld().make_node(vst_bundle)
            vst_bundle.mkdir()

            contents = vst_bundle.make_node('Contents')
            contents.mkdir()

            macos = contents.make_node('MacOS')
            macos.mkdir()

            resources = contents.make_node('Resources')
            resources.mkdir()

            pkginfo = contents.make_node('PkgInfo')
            pkginfo.write('BNDL????\n')

            dylib = bld.env.cxxshlib_PATTERN % vst.target
            bld(features = 'seq',
                rule     = 'cp ${SRC} ${TGT}',
                source   = dylib,
                target   = macos.make_node(dylib),
                shell    = False,
                use      = vst)

            info_plist = contents.make_node('Info.plist')
            info_plist.write(info_plist_template.format(
                dylib=dylib,
                name=plugin_name,
                version=bld.env.VERSION[0],
            ))

info_plist_template = '''\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

<plist version="1.0">
  <dict>
    <key>CFBundleExecutable</key>
    <string>{dylib}</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>Bitrot {name} VST</string>
    <key>CFBundleIdentifier</key>
    <string>io.github.grejppi.bitrot.{name}</string>
    <key>CFBundlePackageType</key>
    <string>BNDL</string>
    <key>CFBundleVersion</key>
    <string>{version}</string>
    <key>CSResourcesFileMapped</key>
    <true/>
    <key>CFBundleSignature</key>
    <string>????</string>
  </dict>
</plist>
'''
